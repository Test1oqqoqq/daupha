const fs = require("fs");
const path = require("path");

const DATA_PATH = path.join(__dirname, "system", "data", "daupha_data.json");

function loadData() {
    if (!fs.existsSync(DATA_PATH)) {
        fs.mkdirSync(path.dirname(DATA_PATH), { recursive: true });
        fs.writeFileSync(DATA_PATH, JSON.stringify({ users: {} }, null, 2));
    }
    return JSON.parse(fs.readFileSync(DATA_PATH));
}
function saveData(data) {
    fs.writeFileSync(DATA_PATH, JSON.stringify(data, null, 2));
}

const SKILLS = [
    { id: 1, name: "H·ªèa Li√™n", desc: "T·∫•n c√¥ng l·ª≠a m·∫°nh m·∫Ω", level: 1, price: 100 },
    { id: 2, name: "BƒÉng Ph√°ch", desc: "T·∫•n c√¥ng bƒÉng gi√°", level: 1, price: 120 },
    { id: 3, name: "Phong Nh·∫≠n", desc: "T·∫•n c√¥ng gi√≥ s·∫Øc b√©n", level: 1, price: 150 },
];

const SHOP = [
    { id: 1, name: "ƒêan d∆∞·ª£c", desc: "H·ªìi ph·ª•c HP", price: 50 },
    { id: 2, name: "B√≠ k√≠p k·ªπ nƒÉng", desc: "M·ªü kh√≥a k·ªπ nƒÉng m·ªõi", price: 200 },
];

const DOUQI = [
    "ƒê·∫•u gi·∫£", "ƒê·∫•u s∆∞", "ƒê·∫°i ƒë·∫•u s∆∞", "ƒê·∫•u linh", "ƒê·∫•u v∆∞∆°ng", "ƒê·∫•u ho√†ng", "ƒê·∫•u t√¥ng", "ƒê·∫•u t√¥n", "ƒê·∫•u th√°nh", "ƒê·∫•u ƒë·∫ø"
];

const DIHOA = [
    "Thanh Li√™n ƒê·ªãa T√¢m H·ªèa", "T·ªãnh Li√™n Y√™u H·ªèa", "Kim ƒê·∫ø Ph·∫ßn Thi√™n Di·ªÖm", "H∆∞ V√¥ Th√¥n Vi√™m"
];

const GIATOC = [
    "Ti√™u Gia", "N·∫°p Lan Gia", "M·ªÖ ƒê·∫∑c Nhƒ© Gia", "Gia M√£ ƒê·∫ø Qu·ªëc"
];

const SUPHU = [
    "D∆∞·ª£c L√£o", "Ph√°p L√£o", "H√†n Phong", "Hu√¢n Nhi"
];

const DAUGIA = [
    { id: 1, name: "D·ªã H·ªèa", desc: "Ng·ªçn l·ª≠a hi·∫øm c√≥, tƒÉng s·ª©c m·∫°nh l·ªõn" },
    { id: 2, name: "Linh D∆∞·ª£c", desc: "D∆∞·ª£c li·ªáu qu√Ω hi·∫øm" }
];

const LUYENDUOC = [
    { id: 1, name: "Thanh T√¢m ƒêan", desc: "TƒÉng ƒë·∫•u kh√≠" },
    { id: 2, name: "B·ªìi Nguy√™n ƒêan", desc: "H·ªìi ph·ª•c nguy√™n kh√≠" }
];

module.exports = class {
    static config = {
        name: "daupha",
        aliases: ["daupha", "dauphatruyen", "dpt"],
        version: "1.2.0",
        role: 0,
        author: "Panna",
        info: "ƒê·∫•u Ph√° Th∆∞∆°ng Khung: skills, shop, ƒë·∫•u kh√≠, d·ªã h·ªèa, gia t·ªôc, s∆∞ ph·ª•, ƒë·∫•u gi√°, luy·ªán d∆∞·ª£c.",
        Category: "Truy·ªán",
        guides: "{pn}daupha [rank|skills|shop|info|douqi|dihoa|giatoc|suphu|daugia|luyenduoc]",
        cd: 5,
        hasPrefix: true,
        images: []
    };

    static async onRun({ api, event, args }) {
        const data = loadData();
        const userID = event.senderID;
        if (!data.users[userID]) {
            data.users[userID] = {
                name: event.senderID,
                level: 1,
                exp: 0,
                coins: 100,
                skills: [],
                items: [],
                douqi: DOUQI[0],
                dihoa: [],
                giatoc: GIATOC[0],
                suphu: SUPHU[0]
            };
            saveData(data);
        }
        const user = data.users[userID];
        const sub = (args[0] || "").toLowerCase();

        // Rank
        if (sub === "rank") {
            const top = Object.values(data.users)
                .sort((a, b) => b.level - a.level || b.exp - a.exp)
                .slice(0, 5)
                .map((u, i) => `${i + 1}. ${u.name} - C·∫•p: ${u.level}, EXP: ${u.exp}`)
                .join("\n");
            return api.sendMessage(`üèÜ B·∫£ng x·∫øp h·∫°ng ƒê·∫•u Ph√°:\n${top}`, event.threadID, event.messageID);
        }

        // Skills
        if (sub === "skills") {
            if (!args[1]) {
                const mySkills = user.skills.length
                    ? user.skills.map(id => {
                        const sk = SKILLS.find(s => s.id === id);
                        return sk ? `- ${sk.name} (Lv${sk.level}): ${sk.desc}` : "";
                    }).join("\n")
                    : "B·∫°n ch∆∞a c√≥ k·ªπ nƒÉng n√†o. D√πng {pn}daupha skills buy [id] ƒë·ªÉ mua.";
                const allSkills = SKILLS.map(s => `ID: ${s.id} | ${s.name} (Lv${s.level}) - ${s.desc} | Gi√°: ${s.price} xu`).join("\n");
                return api.sendMessage(`K·ªπ nƒÉng c·ªßa b·∫°n:\n${mySkills}\n\nK·ªπ nƒÉng c√≥ th·ªÉ mua:\n${allSkills}\n\nMua: {pn}daupha skills buy [id]`, event.threadID, event.messageID);
            }
            // Mua skill
            if (args[1] === "buy" && args[2]) {
                const skillID = parseInt(args[2]);
                const skill = SKILLS.find(s => s.id === skillID);
                if (!skill) return api.sendMessage("ID k·ªπ nƒÉng kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
                if (user.skills.includes(skillID)) return api.sendMessage("B·∫°n ƒë√£ s·ªü h·ªØu k·ªπ nƒÉng n√†y!", event.threadID, event.messageID);
                if (user.coins < skill.price) return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ mua k·ªπ nƒÉng n√†y!", event.threadID, event.messageID);
                user.coins -= skill.price;
                user.skills.push(skillID);
                saveData(data);
                return api.sendMessage(`B·∫°n ƒë√£ mua k·ªπ nƒÉng ${skill.name}!`, event.threadID, event.messageID);
            }
        }

        // Shop
        if (sub === "shop") {
            if (!args[1]) {
                const shopList = SHOP.map(i => `ID: ${i.id} | ${i.name} - ${i.desc} | Gi√°: ${i.price} xu`).join("\n");
                return api.sendMessage(`C·ª≠a h√†ng ƒê·∫•u Ph√°:\n${shopList}\n\nMua: {pn}daupha shop buy [id]`, event.threadID, event.messageID);
            }
            if (args[1] === "buy" && args[2]) {
                const itemID = parseInt(args[2]);
                const item = SHOP.find(i => i.id === itemID);
                if (!item) return api.sendMessage("ID v·∫≠t ph·∫©m kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
                let price = item.price;
                if (user.suphu === "Ph√°p L√£o") price = Math.floor(price * 0.9); // bonus 10% gi·∫£m gi√°
                if (user.coins < price) return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß xu ƒë·ªÉ mua v·∫≠t ph·∫©m n√†y!", event.threadID, event.messageID);
                user.coins -= price;
                user.items.push(itemID);
                saveData(data);
                return api.sendMessage(`B·∫°n ƒë√£ mua v·∫≠t ph·∫©m ${item.name}! (gi√°: ${price} xu)`, event.threadID, event.messageID);
            }
        }

        // Info
        if (sub === "info") {
            const mySkills = user.skills.map(id => {
                const sk = SKILLS.find(s => s.id === id);
                return sk ? sk.name : "";
            }).join(", ") || "Kh√¥ng c√≥";
            const myItems = user.items.map(id => {
                const it = SHOP.find(i => i.id === id);
                return it ? it.name : "";
            }).join(", ") || "Kh√¥ng c√≥";
            return api.sendMessage(
                `üë§ Th√¥ng tin nh√¢n v·∫≠t:\nT√™n: ${user.name}\nC·∫•p: ${user.level}\nEXP: ${user.exp}\nXu: ${user.coins}\nK·ªπ nƒÉng: ${mySkills}\nV·∫≠t ph·∫©m: ${myItems}\nƒê·∫•u kh√≠: ${user.douqi}\nD·ªã h·ªèa: ${(user.dihoa && user.dihoa.length) ? user.dihoa.join(", ") : "Kh√¥ng c√≥"}\nGia t·ªôc: ${user.giatoc}\nS∆∞ ph·ª•: ${user.suphu}`,
                event.threadID, event.messageID
            );
        }

        // ƒê·∫•u kh√≠
        if (sub === "douqi") {
            if (args[1] === "chon" && args[2]) {
                const idx = parseInt(args[2]) - 1;
                if (idx < 0 || idx >= DOUQI.length) return api.sendMessage("ID ƒë·∫•u kh√≠ kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
                // ƒêi·ªÅu ki·ªán l√™n c·∫•p: ƒë·ªß EXP
                const needExp = (idx + 1) * 100;
                if (user.exp < needExp) return api.sendMessage(`B·∫°n c·∫ßn ${needExp} EXP ƒë·ªÉ l√™n c·∫•p n√†y!`, event.threadID, event.messageID);
                const oldDouqi = user.douqi;
                user.douqi = DOUQI[idx];
                let bonus = 0;
                if (user.suphu === "Hu√¢n Nhi") bonus = Math.floor(needExp * 0.1);
                user.exp -= needExp;
                user.coins += 100 + bonus;
                saveData(data);
                return api.sendMessage(`Ch√∫c m·ª´ng! B·∫°n ƒë√£ l√™n c·∫•p ƒë·∫•u kh√≠: ${user.douqi} (m·∫•t ${needExp} EXP, nh·∫≠n ${100 + bonus} xu${bonus > 0 ? ", bonus t·ª´ Hu√¢n Nhi: " + bonus + " xu" : ""})`, event.threadID, event.messageID);
            }
            return api.sendMessage(`C√°c c·∫•p b·∫≠c ƒê·∫•u kh√≠:\n${DOUQI.map((d, i) => `${i + 1}. ${d}`).join("\n")}\n\nCh·ªçn: {pn}daupha douqi chon [id] (c·∫ßn ƒë·ªß EXP, l√™n c·∫•p nh·∫≠n xu, bonus n·∫øu c√≥ s∆∞ ph·ª•)`, event.threadID, event.messageID);
        }

        // D·ªã h·ªèa
        if (sub === "dihoa") {
            if (args[1] === "chon" && args[2]) {
                const idx = parseInt(args[2]) - 1;
                if (idx < 0 || idx >= DIHOA.length) return api.sendMessage("ID d·ªã h·ªèa kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
                if (!user.dihoa) user.dihoa = [];
                if (user.dihoa.includes(DIHOA[idx])) return api.sendMessage("B·∫°n ƒë√£ s·ªü h·ªØu d·ªã h·ªèa n√†y!", event.threadID, event.messageID);
                user.dihoa.push(DIHOA[idx]);
                saveData(data);
                return api.sendMessage(`B·∫°n ƒë√£ nh·∫≠n d·ªã h·ªèa: ${DIHOA[idx]}`, event.threadID, event.messageID);
            }
            return api.sendMessage(`C√°c lo·∫°i D·ªã H·ªèa n·ªïi b·∫≠t:\n${DIHOA.map((d, i) => `${i + 1}. ${d}`).join("\n")}\n\nNh·∫≠n: {pn}daupha dihoa chon [id]`, event.threadID, event.messageID);
        }

        // Gia t·ªôc
        if (sub === "giatoc") {
            if (args[1] === "chon" && args[2]) {
                const idx = parseInt(args[2]) - 1;
                if (idx < 0 || idx >= GIATOC.length) return api.sendMessage("ID gia t·ªôc kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
                const now = Date.now();
                if (!user.lastChangeClan) user.lastChangeClan = 0;
                if (now - user.lastChangeClan < 24 * 60 * 60 * 1000) return api.sendMessage("B·∫°n ch·ªâ ƒë∆∞·ª£c ƒë·ªïi gia t·ªôc 1 l·∫ßn m·ªói ng√†y!", event.threadID, event.messageID);
                if (user.coins < 200) return api.sendMessage("B·∫°n c·∫ßn 200 xu ƒë·ªÉ ƒë·ªïi gia t·ªôc!", event.threadID, event.messageID);
                user.coins -= 200;
                user.giatoc = GIATOC[idx];
                user.suphu = SUPHU[0]; // reset s∆∞ ph·ª• v·ªÅ m·∫∑c ƒë·ªãnh
                user.lastChangeClan = now;
                saveData(data);
                return api.sendMessage(`B·∫°n ƒë√£ ƒë·ªïi sang gia t·ªôc: ${user.giatoc} (m·∫•t 200 xu, s∆∞ ph·ª• v·ªÅ m·∫∑c ƒë·ªãnh)`, event.threadID, event.messageID);
            }
            return api.sendMessage(`C√°c gia t·ªôc l·ªõn:\n${GIATOC.map((g, i) => `${i + 1}. ${g}`).join("\n")}\n\nCh·ªçn: {pn}daupha giatoc chon [id] (m·∫•t 200 xu, m·ªói ng√†y 1 l·∫ßn)`, event.threadID, event.messageID);
        }

        // S∆∞ ph·ª•
        if (sub === "suphu") {
            if (args[1] === "chon" && args[2]) {
                const idx = parseInt(args[2]) - 1;
                if (idx < 0 || idx >= SUPHU.length) return api.sendMessage("ID s∆∞ ph·ª• kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
                if (!user.giatoc) return api.sendMessage("B·∫°n c·∫ßn v√†o gia t·ªôc tr∆∞·ªõc khi ch·ªçn s∆∞ ph·ª•!", event.threadID, event.messageID);
                user.suphu = SUPHU[idx];
                saveData(data);
                let bonusMsg = "";
                if (SUPHU[idx] === "D∆∞·ª£c L√£o") bonusMsg = "(Bonus: +20% EXP khi luy·ªán d∆∞·ª£c th√†nh c√¥ng)";
                if (SUPHU[idx] === "Ph√°p L√£o") bonusMsg = "(Bonus: -10% gi√° v·∫≠t ph·∫©m shop)";
                if (SUPHU[idx] === "H√†n Phong") bonusMsg = "(Bonus: +10% t·ªâ l·ªá luy·ªán d∆∞·ª£c th√†nh c√¥ng)";
                if (SUPHU[idx] === "Hu√¢n Nhi") bonusMsg = "(Bonus: +10% EXP khi l√™n c·∫•p ƒë·∫•u kh√≠)";
                return api.sendMessage(`B·∫°n ƒë√£ ch·ªçn s∆∞ ph·ª•: ${user.suphu} ${bonusMsg}`, event.threadID, event.messageID);
            }
            return api.sendMessage(`C√°c s∆∞ ph·ª• n·ªïi b·∫≠t:\n${SUPHU.map((s, i) => `${i + 1}. ${s}`).join("\n")}\n\nCh·ªçn: {pn}daupha suphu chon [id]`, event.threadID, event.messageID);
        }

        // ƒê·∫•u gi√°
        if (sub === "daugia") {
            return api.sendMessage(`C√°c v·∫≠t ph·∫©m ƒë·∫•u gi√° n·ªïi b·∫≠t:\n${DAUGIA.map(i => `ID: ${i.id} | ${i.name} - ${i.desc}`).join("\n")}`, event.threadID, event.messageID);
        }

        // Luy·ªán d∆∞·ª£c
        if (sub === "luyenduoc") {
            if (args[1] === "chon" && args[2]) {
                const idx = parseInt(args[2]) - 1;
                if (idx < 0 || idx >= LUYENDUOC.length) return api.sendMessage("ID d∆∞·ª£c ph·∫©m kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
                const price = 100; // Gi√° luy·ªán m·ªói lo·∫°i d∆∞·ª£c ph·∫©m (c√≥ th·ªÉ m·ªü r·ªông t·ª´ng lo·∫°i)
                if (user.coins < price) return api.sendMessage(`B·∫°n c·∫ßn ${price} xu ƒë·ªÉ luy·ªán d∆∞·ª£c ph·∫©m n√†y!`, event.threadID, event.messageID);
                // T√≠nh x√°c su·∫•t th√†nh c√¥ng
                let successRate = 0.7;
                if (user.suphu === "H√†n Phong") successRate += 0.1;
                const isSuccess = Math.random() < successRate;
                user.coins -= price;
                if (isSuccess) {
                    if (!user.items) user.items = [];
                    user.items.push(LUYENDUOC[idx].name);
                    let exp = 50;
                    if (user.suphu === "D∆∞·ª£c L√£o") exp = Math.floor(exp * 1.2);
                    user.exp += exp;
                    saveData(data);
                    return api.sendMessage(`B·∫°n ƒë√£ luy·ªán th√†nh c√¥ng: ${LUYENDUOC[idx].name}! Nh·∫≠n ${exp} EXP.`, event.threadID, event.messageID);
                } else {
                    saveData(data);
                    return api.sendMessage(`Luy·ªán th·∫•t b·∫°i! B·∫°n ƒë√£ m·∫•t ${price} xu.`, event.threadID, event.messageID);
                }
            }
            return api.sendMessage(`C√°c lo·∫°i d∆∞·ª£c ph·∫©m n·ªïi b·∫≠t:\n${LUYENDUOC.map((i, idx) => `${idx + 1}. ${i.name} - ${i.desc}`).join("\n")}\n\nLuy·ªán: {pn}daupha luyenduoc chon [id] (m·ªói l·∫ßn luy·ªán t·ªën 100 xu, c√≥ th·ªÉ th·∫•t b·∫°i)`, event.threadID, event.messageID);
        }

        return api.sendMessage("L·ªánh kh√¥ng h·ª£p l·ªá. D√πng {pn}daupha [rank|skills|shop|info|douqi|dihoa|giatoc|suphu|daugia|luyenduoc]", event.threadID, event.messageID);
    }

    static async onEvent({ api, event, msg, model, Threads, Users, Currencies, args }) {
        // C√≥ th·ªÉ m·ªü r·ªông event ·ªü ƒë√¢y
    }

    static async onReaction({ api, event, msg, model, Threads, Users, Currencies, args, onReaction }) {
        // C√≥ th·ªÉ m·ªü r·ªông reaction ·ªü ƒë√¢y
    }

    static async onLoad({ api, model }) {
        // T·∫°o file data n·∫øu ch∆∞a c√≥
        loadData();
    }

    static async onReply({ api, event, msg, model, Threads, Users, Currencies, args, onReply }) {
        // C√≥ th·ªÉ m·ªü r·ªông reply ·ªü ƒë√¢y
    }
}